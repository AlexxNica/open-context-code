<?php

// used to help create hyperlinks; set to current hostname.
//$host = "http://ishmael.ischool.berkeley.edu";
//$host = "http://opencontext";
$host = OpenContext_OCConfig::get_host_config();
$GMapURI = OpenContext_OCConfig::get_google_api();
//$GMapURI = "http://maps.google.com/maps?file=api&amp;v=2&amp;key=".$GMapURI;
//$GMapURI = "http://maps.google.com/maps/api/js?sensor=false&amp;key=".$GMapURI;
$GMapURI = "http://maps.googleapis.com/maps/api/js?sensor=false";

$OAI_url = $host."/oai/request";
$lastUpdate = date("F j, Y", strtotime(OpenContext_OCConfig::last_update()));

if(isset($_GET["geoJSON"])){
	 $geoJSONuri = $_GET["geoJSON"];
}
else{
	 $geoJSONuri = $host."/sets/.geojson?geotile=1";
	 $geoJSONuri = $host."/sets/.geojson";
}

?>


<!DOCTYPE html>
<html lang="en"> 
    <head> 
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>Open Context: Data Publication for Cultural Heritage and Field Research</title> 
        <link rel="shortcut icon" href="/images/layout/oc-favicon.ico" type="image/x-icon" />
        
        <link href="/css/oc-layout-rev2.css" rel="stylesheet" type="text/css" />
        <link href="/css/home-rev2.css" rel="stylesheet" type="text/css" />
		  <link href="/css/bootstrap.css" rel="stylesheet" type="text/css" />
		  <link href="/css/bootstrap-responsive.css" rel="stylesheet" type="text/css" />
        
		  <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
		  <script src="http://cdn.leafletjs.com/leaflet-0.5.1/leaflet.js"></script>
		  
		  <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.5.1/leaflet.css" />
		  <link rel="geotiles" href="<?php echo $geoJSONuri; ?>"/>
		  
	  
	  
      
  </head>

  <body >
        
        <!-- 
            Logo,
        -->    
        <?php echo $this->render('header.phtml'); //reader document top ?>
           
        <!-- 
            Navigation tabs, search box
        -->
        <?php echo $this->render('main-navigation.phtml'); //render main navigation area ?>
        
        
        <div id="main">
            <div id="main_content">
                <div id="intro-row">
                    <div id="intro-cell">
                        <h1>Testing Map-Based Geospatial Search</h1>
                        <p>This inteface uses Leaflet to test Open Context's new GeoJSON service in support of map-based filtering of content published in Open Context.
                        </p>
                    </div>
                    <div id="intro-cell-pict" style="vertical-align: middle; text-align: right; padding-left: 20%;">
                        <!-- <img src="../images/layout/open-context-gen-logo-med.png" alt="Open Context Logo" /> -->
                        <a href="http://alexandriaarchive.org/contribute/" title="Support innovation and open publication of cultural heritage" >
                            <button class="btn btn-success btn-large" type="button">Donate</button>
                        </a>
                        <p>Make a donation or volunteer services</p>
                    </div>
                    <!--
                    <div id="into-cellB">
                        <h5>Introduction</h5>
                    </div>
                    <div id="into-cellC">
                        <h5>How to Publish + Archive Data</h5>
                    </div>
                    <div id="into-cellD">
                        <h5>Current Data Publications</h5>
                    </div>
                    -->
                </div>
            </div>
    
    
    
            <div id="map" style="height:700px;width:90%;margin-left:auto; margin-right:auto;"></div>

                        
                    </div>
                    
                    
                    
                </div>
                
                
                
            </div>
    
    
            <!--
    
            <div id="timemap">
                <div id="timelinecontainer">
                  <div id="timeline"></div>
                </div>
                <div id="mapcontainer">
                  <div id="map"></div>
                </div>
            </div>
            
            -->
        </div>
        <!-- end main div -->
        
        <?php echo $this->render('footer.phtml'); //reader document footer ?>
        
    
		  <script >
				
				var startColor = convertToRGB('#6D03B0');    /* The beginning of your gradient */
				var endColor   = convertToRGB('#FB1B09');    /* The end of your gradient */
				
				function hex (c) {
					 var s = "0123456789abcdef";
					 var i = parseInt (c);
					 if (i == 0 || isNaN (c))
						return "00";
					 i = Math.round (Math.min (Math.max (0, i), 255));
					 return s.charAt ((i - i % 16) / 16) + s.charAt (i % 16);
				  }
				  
				/* Convert an RGB triplet to a hex string */
				function convertToHex (rgb) {
				  return hex(rgb[0]) + hex(rgb[1]) + hex(rgb[2]);
				}
				  
				/* Remove '#' in color hex string */
				function trim (s) { return (s.charAt(0) == '#') ? s.substring(1, 7) : s }
				  
				/* Convert a hex string to an RGB triplet */
				function convertToRGB (hex) {
					 var color = new Array();
					 color[0] = parseInt ((trim(hex)).substring (0, 2), 16);
					 color[1] = parseInt ((trim(hex)).substring (2, 4), 16);
					 color[2] = parseInt ((trim(hex)).substring (4, 6), 16);
					 return color;
				}
				
				//generate a color for a polygon by its count
				function assignColorByCount(actCount, maxCount){
					 
					 if(maxCount > 0 ){
						  actProp = actCount / maxCount;
					 }
					 else{
					   actProp = 1;
					 } 
					 
					 var newColor = new Array();
					 newColor[0] =  startColor[0] + Math.round((endColor[0] - startColor[0]) * actProp);
					 newColor[1] =  startColor[1] + Math.round((endColor[1] - startColor[1]) * actProp);
					 newColor[2] =  startColor[2] + Math.round((endColor[2] - startColor[2]) * actProp);
					 
					 return newColor;
				}
				
				//get a map icon of the right color
				function createColorMapIconURL(actCount, maxCount){
					 
					 var width = 20;
					 var height = 40;
					 var baseUrl = "http://chart.apis.google.com/chart?cht=mm";
					 var strokeColor = "000000";
					 var cornerColor = "FFFFFF";
					 var primaryColor = convertToHex(assignColorByCount(actCount, maxCount));
					 
					 var iconUrl = baseUrl + "&chs=" + width + "x" + height + 
						  "&chco=" + cornerColor + "," + 
						  primaryColor + "," + 
						  strokeColor + "&ext=.png";
					 
					 return iconUrl;
				}
				
				
				
				
				
				//return the center of a polygon
				function getPolyCenter(coordinates){
					 
					 var pts = coordinates[0];
					 var off = pts[0];
					 var twicearea = 0;
					 var x = 0;
					 var y = 0;
					 var nPts = pts.length;
					 var p1,p2;
					 var f;
					 for (var i = 0, j = nPts - 1; i < nPts; j = i++) {
						  p1 = pts[i];
						  p2 = pts[j];
						  //f = (p1.lat - off.lat) * (p2.lng - off.lng) - (p2.lat - off.lat) * (p1.lng - off.lng);
						  f = (p1[1] - off[1]) * (p2[0] - off[0]) - (p2[1] - off[1]) * (p1[0] - off[0]);
						 
						  twicearea += f;
						  
						  /*
						  x += (p1.lat + p2.lat - 2 * off.lat) * f;
						  y += (p1.lng + p2.lng - 2 * off.lng) * f;
						  */
						  
						  x += (p1[1] + p2[1] - 2 * off[1]) * f;
						  y += (p1[0] + p2[0] - 2 * off[0]) * f;
					 }
					 f = twicearea * 3;
					 
					 /*
					 return new L.LatLng(
					 x / f + off.lat,
					 y / f + off.lng
					 );
					 */
					 
					 return new Array(
						  x / f + off[1],
						  y / f + off[0]
						  );
				}
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				var directionLatLngs = new Array();
				
				function filterBox(geoJSONuri){
					 L.control.layers(tileData).removeLayer;
				}
				
				//function applied to each feature
				function onEachFeature(feature, layer) {
					
					 if(feature.geometry.type == "Polygon"){
						  var newbounds = layer.getBounds();
						  bounds.extend(newbounds.getSouthWest());
						  bounds.extend(newbounds.getNorthEast());
					 }
					 if(feature.geometry.type == "Point"){
						  var newbounds = new Array();
						  newbounds[0] = feature.geometry.coordinates[1]; //annoyance of flipping point coordinates!
						  newbounds[1] = feature.geometry.coordinates[0];
						  bounds.extend(newbounds);
					 }
					 if (feature.properties) {
						  var popupContent = "<div> The context <em>'" + feature.properties.name  + "'</em> has " + feature.properties.count;
						  popupContent += " items. <a href='../maps/test-map?geoJSON=" + feature.properties.hrefGeoJSON + "'>Click here</a> to filter by this geographic region</div>";
						  //popupContent += " items. <a href='javascript:filterBox(\"" + feature.properties.hrefGeoJSON + "\")'>Click here</a> to filter by this geographic region</div>";
						  layer.bindPopup(popupContent);
					 }
				}
				
				
				var map = L.map('map').setView([0, 0], 2); //map the map
				var bounds = new L.LatLngBounds();
				var maxCount = 0;
				var minCount = 1000000000000;
				
				var terrain = L.tileLayer('http://api.tiles.mapbox.com/v3/ekansa.map-tba42j14/{z}/{x}/{y}.png', {
						 attribution: 'Open Context, 2012',
					 }).addTo(map);
				
				var tileGroup = new L.FeatureGroup;
				$.getJSON($('link[rel="geotiles"]').attr("href"), function(tileData) {
					 
					 //loop through features to get the maximum count, needed for assigning colors
					 for (var i = 0; i < tileData.features.length; i++) {
						  if(maxCount < tileData.features[i].properties.count){
								maxCount = tileData.features[i].properties.count;
						  }
						  if(minCount > tileData.features[i].properties.count){
								minCount = tileData.features[i].properties.count;
						  }
					 }
					 
					 //loop through features to make points with the correct color icon
					 var iconArray = new Array();
					 for (i = 0; i < tileData.features.length; i++) {
						  if(tileData.features[i].geometry.type == "Polygon"){
								var pointCoords = getPolyCenter(tileData.features[i].geometry.coordinates);
								var latlng = new L.LatLng(pointCoords[0], pointCoords[1]);
								
								var actCount = tileData.features[i].properties.count;
								var iconURL = createColorMapIconURL(actCount, maxCount);
								iconArray[actCount] =  L.icon({
														  iconUrl: iconURL,
														  shadowUrl: "http://cdn.leafletjs.com/leaflet-0.5.1/images/marker-shadow.png",
														  iconAnchor:  [10, 38],
														  shadowAnchor: [12, 40]
														  });
								
								var marker = L.marker(latlng, {icon: iconArray[actCount]}).addTo(map);
								var polyPointContent = "<div> The context <em>'" + tileData.features[i].properties.name  + "'</em> has " + tileData.features[i].properties.count;
								polyPointContent += " items. <a href='../maps/test-map?geoJSON=" + tileData.features[i].properties.hrefGeoJSON + "'>Click here</a> to filter by this geographic region</div>";
								marker.bindPopup(polyPointContent);
								//alert("Lat " + pointCoords[0] + " Lon " + pointCoords[1]);
						  }
						  if(tileData.features[i].geometry.type == "Point"){
								var latlng = new L.LatLng(tileData.features[i].geometry.coordinates[1], tileData.features[i].geometry.coordinates[0]);
								bounds.extend(latlng);
								
								var actCount = tileData.features[i].properties.count;
								var iconURL = createColorMapIconURL(actCount, maxCount);
								iconArray[actCount] =  L.icon({
														  iconUrl: iconURL,
														  shadowUrl: "http://cdn.leafletjs.com/leaflet-0.5.1/images/marker-shadow.png",
														  iconAnchor:  [10, 38],
														  shadowAnchor: [12, 40]
														  });
								
								var marker = L.marker(latlng, {icon: iconArray[actCount]}).addTo(map);
								var pointContent = "<div> The context <em>'" + tileData.features[i].properties.name  + "'</em> has " + tileData.features[i].properties.count;
								pointContent += " items. <a href='../maps/test-map?geoJSON=" + tileData.features[i].properties.hrefGeoJSON + "'>Click here</a> to filter by this geographic region</div>";
								marker.bindPopup(pointContent);
						  }
					 }
					 
					 
					 //now display the geoJSON data, filter out points, since those are handled differently
					 L.geoJson(tileData, {
						  style: function(feature) {
								if(feature.geometry.type == "Polygon"){
									 var actCount = feature.properties.count;
									 var newColorRGB = assignColorByCount(actCount, maxCount);
									 var newColorHex =  "#" + convertToHex(newColorRGB);
									 return {color: newColorHex , icon: iconArray[actCount]};
								}
						  },
						  onEachFeature: onEachFeature,
						  filter: function(feature, layer) {
								if(feature.geometry.type == "Point"){
									 return false;
								}
								else{
									 return true;
								}
						  }
					 }
					 
					 ).addTo(map);
					 map.fitBounds(bounds);
				});
				
				
				
		  </script> 
  
	 </body>
</html>    