<?php

// used to help create hyperlinks; set to current hostname.
$host = "http://opencontext";
define ('HOST', $host);


//$rawResponse = $this->rawResponse;
//echo $rawResponse;

// for testing
//$param_array = $this->param_array;
//echo var_dump($param_array); 


/* for testing
$proj = $this->proj;
echo $proj;
exit;
*/





/** creates a list of links so users can navigate back through the context hierarchy; i.e., Contained in: Turkey / Domuztepe / Survey
*  It's used to help create 'remove filter' functionality. *
*/
function createContextLinks($default_context_path, $request_array_1) {
    // get the contexts
    $context_array = explode('/', $default_context_path);
    // revove the last (current) context and save it; we won't make this one into a link
    $current_context = array_pop($context_array);
    
    if ($context_array) { //if there are still contexts in $contex_array, turn them into links
    
        // array to store context links that we'll be building
        $context_link_array = array();
        
        // initialize to avoid undefined variable notices. 
        $context_path = '';
        
        foreach ($context_array as $context) {
            $context_path .= urlencode($context) . '/';  /// build up the context paths
            $context_link_array[] .= '<a href="' .  HOST . '/sets/' . $context_path . $request_array_1 . '" >'. $context . '</a>'; 
        }
        
        foreach ($context_link_array as $context_link) {
            echo $context_link . ' / ';
        }
    }    
    echo $current_context;

} // end function


/** Used to help construct the 'Remove Filter' uri. */
function params_minus_filter($key, $value, $request_array_1) {
    $search_str = $key . '=' .  urlencode(OpenContext_UTF8::charset_decode_utf_8($value));
    $params_minus_filter = str_replace($search_str,'', $request_array_1);
   
    if ($params_minus_filter) {
        // clean-up code: remove extra '&' and left-over '?&' and '&&' combinations. 
        $params_minus_filter = preg_replace('/(\?|&)$/', '', $params_minus_filter);
        $params_minus_filter = preg_replace('/^\?&/', '?', $params_minus_filter);
        $params_minus_filter = str_replace('&&', '&', $params_minus_filter);

        return $params_minus_filter;
    }
}



/** Used to help construct the 'Remove Filter' uri for tags. */
function params_minus_filter_tag($key, $value, $request_array_1) {
    
    $search_str = '(\?|&)' . $key . '\[\]=' .  utf8_encode($value);
    $search_str = str_replace('/', '\/', $search_str);

    // url_encode and utf8_encode the query param or else we won't always get a match
    $params_minus_filter = preg_replace("/$search_str/",'', utf8_encode(urldecode($request_array_1)));
    // if are still additional query parameters, make sure the query string begins with a '?'
    if ($params_minus_filter) { 
        $params_minus_filter = '?' . urlencode(utf8_decode(substr($params_minus_filter, 1)));
        // undo the url encoding on the '=' and the '&'
        $params_minus_filter = str_replace('%3D', '=', $params_minus_filter);
        $params_minus_filter = str_replace('%26', '&', $params_minus_filter);
        $params_minus_filter = str_replace('%5B', '[', $params_minus_filter);
        $params_minus_filter = str_replace('%5D', ']', $params_minus_filter);
        
    
    return $params_minus_filter;
    
    }
}


/** Used to help construct the 'Remove Filter' uri for date ranges. */
function params_minus_filter_date($t_start, $t_end, $request_array_1) {
    
    $search_str = '(\?|&)' . 't-start=' .  $t_start . '&t-end=' . $t_end;
    //$search_str = str_replace('-', '\-', $search_str);
    //echo $search_str . '<br/>';

    // url_encode and utf8_encode the query param or else we won't always get a match
    $params_minus_filter = preg_replace("/$search_str/",'', utf8_encode(urldecode($request_array_1)));
    // if are still additional query parameters, make sure the query string begins with a '?'
    if ($params_minus_filter) { 
        $params_minus_filter = '?' . urlencode(utf8_decode(substr($params_minus_filter, 1)));
        // undo the url encoding on the '=' and the '&'
        $params_minus_filter = str_replace('%3D', '=', $params_minus_filter);
        $params_minus_filter = str_replace('%26', '&', $params_minus_filter);    
    
    return $params_minus_filter;
    }
}


/** Used to help construct the 'Remove Filter' uri for variables */ 
function params_minus_filter_var($va_key, $request_array_1) {
    // contruct regular exression for match
    $va_key = str_replace('(', '\(', $va_key);
    $va_key = str_replace(')', '\)', $va_key);
    $search_str = '(\?|&)' . 'prop\[' . $va_key . '\]';
    $search_str = str_replace('/', '\/', $search_str);

    $search_str = '/' . $search_str . '/';
    // url_encode and utf8_encode the query param or else we won't always get a match
    $params_minus_filter = preg_replace($search_str,'', utf8_encode(urldecode($request_array_1)));
   
    // if are still additional query parameters, make sure the query string begins with a '?'
    if ($params_minus_filter) { 
        $params_minus_filter = '?' . urlencode(utf8_decode(substr($params_minus_filter, 1)));
        // undo the url encoding on the '=' and the '&'
        $params_minus_filter = str_replace('%3D', '=', $params_minus_filter);
        $params_minus_filter = str_replace('%26', '&', $params_minus_filter);    
    
        return $params_minus_filter;
    }
}


/** Used to help construct the 'Remove Filter' uri for values and variables */  // clean up
function params_minus_filter_var_val($va_key, $va_value, $request_array_1) {
    $va_key = str_replace('(', '\(', $va_key);
    $va_key = str_replace(')', '\)', $va_key);
    $search_str = '(\?|&)' . 'prop\[' . $va_key . '\]=' .  utf8_encode($va_value);
    $search_str = str_replace('/', '\/', $search_str);
    $search_str ='/' . $search_str . '/';

    // url_encode and utf8_encode the query param or else we won't always get a match
    $params_minus_filter = preg_replace($search_str,'', utf8_encode(urldecode($request_array_1)));
    // if are still additional query parameters, make sure the query string begins with a '?'
    if ($params_minus_filter && $params_minus_filter != '?') {
        $params_minus_filter = '?' . urlencode(utf8_decode(substr($params_minus_filter, 1)));
        // undo the url encoding on the '=' and the '&'
        $params_minus_filter = str_replace('%3D', '=', $params_minus_filter);
        $params_minus_filter = str_replace('%26', '&', $params_minus_filter);    
    
        return $params_minus_filter;
    }
}











$unfold_vals = $this->unfold_vals;
$requestURI = $this->requestURI;
$requestParams = $this->requestParams;


$request_array = explode('?', $requestURI, 2);
//array explode  ( string $delimiter  , string $string  [, int $limit  ] )

if (substr_compare($request_array[0], '/' , -1)) {  // if the uri doesn't end in a slash (minus query parameters), 
    $request_array[0] = $request_array[0] . '/';  // add one
}


if (isset($request_array[1])) { // if there are query parameters,
    $request_array[1] = "?" . $request_array[1];  // prepend a '?' to the set of parameters since we exploded on the '?' to get this string. 
    //echo $request_array[1]; // for testing
} else {
    $request_array[1] = null;
}




/*



/*
if ($requestURI) {
    echo "requestURI: " . $requestURI;
    echo "<br/>";
}
*/




// used to help create hyperlinks; set to current hostname.
//$host = "http://zend.localhost";
//define ('HOST', $host);






/* this complex check is needed because the request parameter 'module' with the value 'default' is present if the user selects a
 * non-context parameter.  The reason for this behavior is not clear.  
 */
if ((count($requestParams) < 3)  ||  ((count($requestParams) < 4) && (in_array('module', array_keys($requestParams))))) {

    $filter_message = "(View is not filtered)";
    
    $googleURI = str_replace("/sets","/sets/facets/.kml",$requestURI);
    $googleURI = str_replace("/sets/","/sets/facets/.kml",$requestURI);
    $facetAtomURI = str_replace("/sets","/sets/facets/.atom",$requestURI);
    $facetAtomURI = str_replace("/sets","/sets/facets/.atom",$requestURI);
    $resultAtomURI = $requestURI.".atom";
}//end case with no filters
else{
    
    $filter_message = "";
    
    $googleURI = str_replace("?",".kml?",$requestURI);
    $googleURI = str_replace("/sets/","/sets/facets/",$googleURI);
    $facetAtomURI = str_replace("?",".atom?",$requestURI);
    $resultAtomURI = $facetAtomURI;
    $facetAtomURI = str_replace("/sets/","/sets/facets/",$facetAtomURI);
    
    if(substr_count($googleURI,".kml?")<1){
        $googleURI .= ".kml";
        $facetAtomURI .= ".atom";
        $resultAtomURI = $requestURI.".atom";
    }
    
    if(substr_count($googleURI,"facets/.kml")<1){
        $googleURI = str_replace("/.kml",".kml",$googleURI);
        $facetAtomURI = str_replace("/.atom",".atom",$facetAtomURI);
        $resultAtomURI = str_replace("/.atom",".atom",$resultAtomURI);
    }
}//end case with filter parameters

$resultAtomURI = $host.$resultAtomURI;


$numFound = $this->numFound;



$html_head = '<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>Open Context Browse: ('.$numFound.' Items Showing)</title>
<link href="/css/opencontext_style.css" rel="stylesheet" type="text/css" />
<link href="/css/opencontext_browse.css" rel="stylesheet" type="text/css" />';

$atom_link = '<link rel="alternate" type="application/atom+xml" title="Atom facet feed" href="'.$facetAtomURI.'"></link>';

echo $html_head;
echo $atom_link;
echo "</head><body>";
echo "<p>Open Context currently has " . $numFound . " items, filtered by the following criteria:</p>";
echo $filter_message;



if (isset($requestParams['default_context_path'])){
    echo 'Contained in: ';
    createContextLinks($requestParams['default_context_path'], $request_array[1]);
    
    echo ' <a href="' .  $host . str_replace(($requestParams['default_context_path'] . '/'), '', urldecode($request_array[0])) . $request_array[1] . '" >Remove Filter</a><br/>';

}
//if (isset($requestParams['cat'])) {
//    echo "Items of the Category: " . $requestParams['cat'] . ' <a href="' .  $host . $request_array[0] . str_replace('?cat='. $requestParams['cat'], '', urldecode($request_array[1])) . '" >Remove Filter</a><br/>';
//}





// boolean to help us display a time filter remover just once. Otherwise the filter might be triggered by both the t-start and t-end parameters.
$showDateFilter = false;


// Removal of Filters
foreach ($requestParams as $key => $value) {
    //echo "$key = $value";
    if ($key == 'controller' || $key == 'action' || $key == 'default_context_path') {  // we handle default context path separately
        continue;
    }
    elseif($key == 'cat') {    
        echo 'Category: ' . utf8_encode($value) . ' ' .'<a href="' . $host . $request_array[0] . params_minus_filter($key, $value, $request_array[1]) . '" >Remove Filter</a><br/>';
 
    } elseif($key == 'proj') {
        echo 'Project: ' . OpenContext_UTF8::charset_encode_utf_8($value) . ' ' .'<a href="' . $host . $request_array[0] . params_minus_filter($key, $value, $request_array[1]) . '" >Remove Filter</a><br/>';
    } elseif ($key == 'tagger') {
        echo 'Tagged by: ' . utf8_encode($value) . ' ' .'<a href="' . $host . $request_array[0] . params_minus_filter($key, $value, $request_array[1]) . '" >Remove Filter</a><br/>';
    }  elseif($key == 'person') {
        echo 'Related person: ' . utf8_encode($value) . ' ' .'<a href="' . $host . $request_array[0] . params_minus_filter($key, $value, $request_array[1]) . '" >Remove Filter</a><br/>';
    } elseif($key == 'prop') {
        foreach ($value as $va_key => $va_value) {
            if ($va_key && !$va_value) { // if the use has selected a variable but not a corresponding value
               echo 'Variable: ' . utf8_encode($va_key) .'    <a href="' . $host . $request_array[0] . params_minus_filter_var($va_key, $request_array[1]) . '" >Remove Filter</a><br/>';
              //echo "$va_key = $va_value<br/>";
            } elseif ($va_key && $va_value) {
                //echo "$va_key = $va_value<br/>";  // note: this needs more testing to determine the correct encoding (utf8_encode, etc.)
              echo 'Variable: ' . utf8_encode($va_key) . ' with value: ' .  utf8_encode($va_value) . '    <a href="' . $host . $request_array[0] . params_minus_filter_var_val($va_key, $va_value, $request_array[1]) /*. params_minus_filter_var_val($va_key, $va_value, $request_array[1]) */ .  '" >Remove Filter</a><br/>';
            }
        }
    } elseif ($key == 'image') {
        echo 'With images  <a href="' . $host . $request_array[0] . params_minus_filter($key, $value, $request_array[1]) . '" >Remove Filter</a><br/>';
        
    } elseif ($key == 'other') {
        echo 'With other media  <a href="' . $host . $request_array[0] . params_minus_filter($key, $value, $request_array[1]) . '" >Remove Filter</a><br/>';
        
    } elseif ($key == 'diary') {
        echo 'With diary items  <a href="' . $host . $request_array[0] . params_minus_filter($key, $value, $request_array[1]) . '" >Remove Filter</a><br/>';
        
    } elseif ($key == 'tag') {
        foreach ($value as $value) {
            echo 'With the tag: ' . utf8_encode($value) . ' ' .'<a href="' . $host . $request_array[0] . params_minus_filter_tag($key, $value, $request_array[1]) . '" >Remove Filter</a><br/>';
        }
    } /* 
    Note: this needs to come last in the series of if else statements
    */ elseif (isset($requestParams['t-start']) && isset($requestParams['t-end']) && !$showDateFilter) {
        echo 'Date Range: ' . OpenContext_DateRange::bce_ce_note($requestParams['t-start']) . ' to ' . OpenContext_DateRange::bce_ce_note($requestParams['t-end']) . ' <a href="' . $host . $request_array[0] . params_minus_filter_date($requestParams['t-start'] , $requestParams['t-end'], $request_array[1]) . '" >Remove Filter</a><br/>';
        $showDateFilter = true;
    }
    
}



// get the facet counts 
$facet_fields = $this->facet_fields;

// booleans that help us display the "Variable" and "Value" labels just once for nom, ord, and bool values
$var_displayed = false;
$var_val_displayed = false;

//add a new facet category for date ranges 
$date_range_array = OpenContext_DateRange::make_date_range_facets($facet_fields["time_start"], $facet_fields["time_end"]);

// prefix to handle whether to use a '?' or a '&' in the query string; used for dates and media 


$qprefix = '?';
if ($request_array[1]) {
    $qprefix = $request_array[1] .'&';
}


/** replaces prop[key] with prop[key]= value */
function addPropValue($requestParamsProp, $request_array_1, $va_key) {
    foreach ($requestParamsProp as $param_key => $param_value) {
        if ($param_key && !$param_value) {
            $param_key = urlencode($param_key);
            $request_array_1 = str_replace('prop['. $param_key . ']',  'prop['. $param_key . ']' . '=' . urlencode(utf8_decode($va_key)), $request_array_1);   
            return $request_array_1;
        }  
    }
}


// Facet category labels...Project, Category, etc.

/* for testing */
//echo var_dump($facet_fields);
//exit;

foreach ($facet_fields as $facet_cat => $value_array) {
    if (count($value_array)) { // make sure there are facets before displaying the label; TODO: verify this is the behavior we want
    if ($facet_cat == 'project_name' ) {
        echo "<h2>Project</h2>";
    } elseif ($facet_cat == 'item_class' ) {
        echo "<h2>Category</h2>";
    } elseif (preg_match('/^def_context_/', $facet_cat)) {
        echo "<h2>Context</h2>";
    } elseif ($facet_cat == 'person_link') {
        echo "<h2>Related People</h2>";
    } elseif ($facet_cat == 'user_tag' ) {
        echo "<h2>User Tag</h2>";
    } elseif ($facet_cat == 'tag_creator_name' ) {
        echo "<h2>Tag Creator</h2>";
    } elseif ($facet_cat == 'time_start' ) {
        //echo "<h2>Time Start</h2>";
    } elseif ($facet_cat == 'time_end' ) {
        //echo "<h2>Time End</h2>";
    } elseif ($facet_cat == 'variable_nominal') { // just display the label 'Variable' once, not three times for nom, bool, and ord.
        if (!$var_displayed){
        echo "<h2>Variable</h2>";
        $var_displayed = true;
        }
    } elseif ($facet_cat == 'variable_ordinal') { // just display the label 'Variable' once, not three times for nom, bool, and ord.
        if (!$var_displayed){
        echo "<h2>Variable</h2>";
        $var_displayed = true;
        }
    } elseif ($facet_cat == 'variable_boolean') { // just display the label 'Variable' once, not three times for nom, bool, and ord. 
        if (!$var_displayed){
        echo "<h2>Variable</h2>";
        $var_displayed = true;
        }   
   //     $var_displayed = true;
   // } elseif (preg_match('/^variable_/', $facet_cat) && (!$var_displayed)) { // just display the label 'Variable' once, not three times for nom, bool, and ord.
   //     echo "<h2>Variable</h2>";
   //     $var_displayed = true;
    } elseif (preg_match('/_var_nom_val/', $facet_cat)) { // just display the label 'Variable' once, not three times for nom, bool, and ord.
        if (!$var_val_displayed) { 
            $facet_cat = str_replace('\\', '', $facet_cat); // remove escaping from variable name, i.e., Bucket\ \#
            echo "<h2>Values for " . substr($facet_cat, 0, strlen($facet_cat) -12 ) ." </h2>";
            $var_val_displayed = true;
        }
        $var_val_displayed = true;
     } elseif (preg_match('/_var_ord_val/', $facet_cat)) { // just display the label 'Variable' once, not three times for nom, bool, and ord.
        if (!$var_val_displayed) {
            $facet_cat = str_replace('\\', '', $facet_cat); // remove escaping from variable name, i.e., Bucket\ \#
            echo "<h2>Values for " . substr($facet_cat, 0, strlen($facet_cat) -12 ) ." </h2>";
                $var_val_displayed = true;
            }
     } elseif (preg_match('/_var_bool_val/', $facet_cat)) { // just display the label 'Variable' once, not three times for nom, bool, and ord.
        if (!$var_val_displayed) {
            $facet_cat = str_replace('\\', '', $facet_cat); // remove escaping from variable name, i.e., Bucket\ \#
            echo "<h2>Values for " . substr($facet_cat, 0, strlen($facet_cat) -13 ) ." </h2>";
            $var_val_displayed = true;
        } 
    } elseif ($facet_cat == 'image_media_count') {
        echo "<h2>Image Media Count</h2>";
    } else {
        echo $facet_cat;
    }
/* End of facet labels */

/* Loop through facet values */
    }
    // Facet names and counts ... Jordan: 119769
    foreach ($value_array as $va_key => $va_value) {
        if (preg_match('/^def_context_/', $facet_cat)) {

            echo '<a href="' .  $host . $request_array[0] . urlencode($va_key)  . $request_array[1] . '" > '. $va_key .'</a>' . ': ' . $va_value . '<br/>';    
        
        } elseif ($facet_cat == 'project_name' && (!in_array(OpenContext_UTF8::charset_decode_utf_8($va_key), array_values($requestParams)))) {
            
            //$va_key = str_replace("&amp;#", "&#", $va_key);
            //echo $va_key;
            //echo utf8_decode($va_key);// exit;//= utf8_decode($va_key);
            
            if (!$request_array[1]) {
                
                echo '<a href="' . $host . $request_array[0] . '?proj='. urlencode(OpenContext_UTF8::charset_decode_utf_8($va_key)) . '" > ' . $va_key . '</a>' . ': ' . $va_value . '<br/>';
            } else {
                echo '<a href="' . $host . $request_array[0] . $request_array[1] . '&proj='. urlencode(OpenContext_UTF8::charset_decode_utf_8($va_key)) . '" > ' . $va_key . '</a>' . ': ' . $va_value . '<br/>';
            }    
       
       
       
        } elseif ($facet_cat == 'item_class'  && (!in_array($va_key, array_values($requestParams)))) {
            if (!$request_array[1]) {
                echo '<a href="' . $host . $request_array[0] . '?cat='. urlencode($va_key) . '" > ' . $va_key . '</a>' . ': ' . $va_value . '<br/>';
            } else {
                echo '<a href="' . $host . $request_array[0] . $request_array[1] . '&cat='. urlencode($va_key) . '" > ' . $va_key . '</a>' . ': ' . $va_value . '<br/>';
            }    
             
        } elseif ($facet_cat == 'time_end' || $facet_cat == 'time_start'){  // match but don't do anything
        
               
        } elseif ($facet_cat == 'tag_creator_name' && !in_array('tagger', array_keys($requestParams))) {
            if (!$request_array[1]) {
                echo '<a href="' . $host . $request_array[0] . '?tagger='. urlencode(utf8_decode($va_key)) . '" > ' . $va_key . '</a>' . ': ' . $va_value . '<br/>';
            } else {
                echo '<a href="' . $host . $request_array[0] . $request_array[1] . '&tagger='. urlencode(utf8_decode($va_key)) . '" > ' . $va_key . '</a>' . ': ' . $va_value . '<br/>';
            }    
        } elseif ($facet_cat == 'user_tag') { 
            // for testing:
            //echo $va_key;
            //echo $va_value;
            //echo $requestParams['tag'];
            //echo var_dump($requestParams['tag']);
            if (!$request_array[1]) {  // no query string yet. 
               echo '<a href="' . $host . $request_array[0] . '?tag[]='. urlencode(utf8_decode($va_key)) . '" > ' . $va_key . '</a>' . ': ' . $va_value . '<br/>';
            }  elseif (!isset($requestParams['tag']) || !in_array($va_key, $requestParams['tag'])) { // make sure the user hasn't already selected this tag { 
               echo '<a href="' . $host . $request_array[0] . $request_array[1] . '&tag[]='. urlencode(utf8_decode($va_key)) . '" > ' . $va_key . '</a>' . ': ' . $va_value . '<br/>';
            } else {
               echo $va_key . ": " . $va_value . "<br/>";
            }
        } elseif (preg_match('/^variable_/', $facet_cat)) {

                $createLink = true;
                // don't create a link if the user has already selected this particular variable
                if (isset($requestParams['prop']) && (in_array($va_key, array_keys($requestParams['prop'])))) {
                    $createLink = false;
                }

                if ($createLink) {
                    if (!$request_array[1]) {
                        echo '<a href="' . $host . $request_array[0] . '?prop[' . urlencode(utf8_decode($va_key)) . ']' . '" > ' . utf8_decode($va_key) . '</a>' . ': ' . $va_value . '<br/>';
                    }  else {
                        echo '<a href="' . $host . $request_array[0] . $request_array[1] . '&prop[' . urlencode(utf8_decode($va_key)) . ']' . '" > ' . utf8_decode($va_key) . '</a>' . ': ' . $va_value . '<br/>'; 
                        
                    }
                } else {
                     echo $va_key . ": " . $va_value . "<br/>";
                }
                
        } elseif (preg_match('/_var_/', $facet_cat) && (!in_array($va_key, array_values($requestParams)))) {  
           
            
            
            // handle long variable values by truncating them; in the controller we truncate them as well and then search using a prefix. Note: this introduces some error. 
            $value_trunc = false;  // by default we do not truncate values
            if (strlen($va_key) > 127) {  // however, if the value is very long, truncate it
                $va_key = substr($va_key, 0, 127); 
                $value_trunc = true;
            } 
            
            // add a '...' to the end of truncated values so users will know they're truncated
            $val_suffix = '';
            if ($value_trunc) {
               $val_suffix = '... '; 
            }
            
            /* Todo: use a regular expression to replace car with var/val pair.  This is will solve the problem of appending a '=' to the wrong variable. */
            echo '<a href="' . $host . $request_array[0] . addPropValue($requestParams['prop'], $request_array[1], $va_key) . /*$request_array[1] . '='. urlencode(utf8_decode($va_key)) .*/ '" > ' . $va_key . '</a>' . $val_suffix . ': ' . $va_value . '<br/>';

        } elseif ($facet_cat == 'person_link' && (!in_array('person', array_keys($requestParams)))) {
                if (!$request_array[1]) {
                    echo '<a href="' . $host . $request_array[0] . '?person='. urlencode(OpenContext_UTF8::charset_decode_utf_8($va_key)) . '" > ' . $va_key . '</a>' . ': ' . $va_value . '<br/>';
                } else {
                    echo '<a href="' . $host . $request_array[0] . $request_array[1] . '&person='. urlencode(OpenContext_UTF8::charset_decode_utf_8($va_key)) . '" > ' . $va_key . '</a>' . ': ' . $va_value . '<br/>';
                }
            //echo $va_key . ': ' . $va_value . '<br/>';
        }else {
            echo $va_key . ": " . $va_value . "<br/>";
        }
    
    
    }
    
    }       






/* Since we may need to modify $qprefix as we prepare the date uris, save it as the separate variable, $date_qprefix. Then we can use $qprefix later when we process uris for media */
$date_qprefix = $qprefix;

$num_date_ranges = count($date_range_array);

$iii=0;
if ($num_date_ranges) {
echo "<h2>Date Range</h2>";
}
while($iii < $num_date_ranges){
    $act_range = $date_range_array[$iii];
    if (strrchr($date_qprefix, 't-start')) {  // if there's already a 't-start' in the uri, 
    $date_qprefix = preg_replace('/(\?|&)t-start=(\-)?(\d+)/', '', $date_qprefix); // remove it. Otherwise, date parameters get appended to existing parameters
    }
    if (strrchr($date_qprefix, 't-end')) {
        $date_qprefix = preg_replace('/(\?|&)t-end=(\-)?(\d+)/', '', $date_qprefix);
    }
    // make sure the query string starts with a '?'
    if (!preg_match('/^\?/', $date_qprefix)) {
        $date_qprefix = preg_replace('/^&/', '?', $date_qprefix);
    }
    // if the date range is already selected, don't display it as a hyperlink    
    if (strstr($request_array[1], $act_range['uri_param'])) {
        echo $act_range["display"] . ': ' . $act_range["count"] . '<br/>';
    } else {
        
        
   // for testing: 
   //echo 'act_range["uri_param"]: ' . $act_range['uri_param'];
   //echo 'is not in . ' . $request_array[1] . '<br/>';
   //echo $request_array[1];
   //echo '<br/>';
   // otherwise, display it is a link
    echo '<a href="' . $host . $request_array[0] . $date_qprefix . $act_range["uri_param"] .'">'.$act_range["display"].'</a>: '.$act_range["count"].'<br/>';}
            
    $iii++;

}

$facet_queries = $this->facet_queries;
//echo count(array_values($facet_queries));

// make sure there are values for media facets before displaying the 'Items with Media' label and looping through keys and values
if ($facet_queries['image_media_count:[1 TO *]']||$facet_queries['other_binary_media_count:[1 TO *]']||$facet_queries['diary_count:[1 TO *]']) {
    echo "<h2>Items with Media</h2>";
    foreach ($facet_queries as $key => $value) {
        if ($value > 0) { // only display the facet if its count is at least 1.
            if ($key == 'image_media_count:[1 TO *]') {
                if (!in_array('image', array_keys($requestParams))) { // only make this a link if the user hasn't selected yet.
                    echo '<a href="' . $host . $request_array[0] . $qprefix .'image=true" >' . 'Images</a>: ' . $value . '<br/>';
                } else {
                    echo "Images: " . $value . "<br/>";
                }
            } elseif ($key == 'diary_count:[1 TO *]') {
                if (!in_array('diary', array_keys($requestParams))) {
                    echo '<a href="' . $host . $request_array[0] . $qprefix . 'diary=true" >' . 'Diary</a>: ' . $value . '<br/>';
                } else {
                    echo "Diary Links: " . $value . "<br/>";
                }
            } elseif ($key == 'other_binary_media_count:[1 TO *]') {
                if (!in_array('other', array_keys($requestParams))) {
                    echo '<a href="' . $host . $request_array[0] . $qprefix . 'other=true" >' . 'Other</a>: ' . $value . '<br/>';
                } else {
                    echo "Other Media: " . $value . "<br/>";
                }
            }
        }
    }
}


echo "<br/>";
echo "<p>View in <a href='".$googleURI."'>GoogleEarth</a></p>";
echo "<p>Get <a href='".$facetAtomURI."'>Facet Atom Feed</a></p>";

$result_output = OpenContext_ResultAtom::atom_to_html($resultAtomURI);
echo $result_output; 

echo "</body></html>";
?>