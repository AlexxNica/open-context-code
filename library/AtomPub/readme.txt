Date:  	10/11/2009
Author:	Sarah Van Wart
Email:  vanwars@gmail.com

----------------------------------
- General Notes and Instructions -
----------------------------------
This AtomPub section was adapted from this code:  
   http://code.google.com/p/php-atompub-server/

-----------
- Changes -
-----------
I tried to keep the code as similar to the original, but had to make some changes in order to conform to the 'strict standards' that are enforced by the Zend framework.  I also had to make modifications so that all of the Zend URL redirects (inherent in Zend's architecture) could be accomodated within the atompub code.

----------------
- Architecture -
----------------
Here's the architecture of atompub portion of OpenContext:

1) atompub libraries are in the library/AtomPub directory
2) atom entries (the data) and corresponding html, css, and json files are located in the "public" directory.  The following three directories within the "public" directory are dedicated to atom functionality:
  * cache
  * lists
  * store
These directories get created automatically.  The "templates" and "tools" directories (within the public directory) are also related to the atompub server, but they might not be necessary.  As I continue to test, I might end up removing them.
3) The service.xml document is also located in the public directory, and defines the collections that are allowable (anything defined in this document is automatically generated).
4) The PublishController.php is the front-end of the atompub server.  You GET/POST/PUT/DELETE to http://{your_server_name}/publish/{collection}/{entry}

-----------
- Testing - 
-----------

1.  Browse to http://{your_server_name}/public/tools/postatom.html (a test form).
2.  for "GET" method:  
   * URI:  http://{your_server_name}/publish/test/, where "test" is an entry in the service.xml document.
   * Method:  GET
   * Mime:    application/atom+xml;type=entry
   * SLUG:    {some_unique_identifier}
   * Press submit.  Response will show you all of the entries in the "test" collection.  You can also simply browse to http://{your_server_name}/publish/test/ and take a look.

3.  for "POST" method:  Follow steps above, but change method from "GET" to "POST."  Upon submission, browse again to http://{your_server_name}/publish/test/ and note the new entry.

4.  for "DELETE":  Follow steps above, but change method from "POST" to "DELETE" and modify the URI to indicate the particular atom entry you would like to delete.  You may view the atom entries that have been generated by browsing to the "\public\store\test" directory.  Each entry has the *.atomentry extension.  If I wanted to delete the "my_entry.atomentry" entry in my "test" collection, I would update the URI to read : "http://your_server_name}/publish/test/my_entry.atomentry" and then submit.

5.  for "PUT":  First use the "GET" method to load the particular entry into the cache (use the same URI as in step 4).  Then, change the method to "PUT," modify the XML as desired, and submit the form.

